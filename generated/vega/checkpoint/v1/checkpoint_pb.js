// source: vega/checkpoint/v1/checkpoint.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vega_vega_pb = require('../../../vega/vega_pb.js');
goog.object.extend(proto, vega_vega_pb);
var vega_assets_pb = require('../../../vega/assets_pb.js');
goog.object.extend(proto, vega_assets_pb);
var vega_governance_pb = require('../../../vega/governance_pb.js');
goog.object.extend(proto, vega_governance_pb);
goog.exportSymbol('proto.vega.checkpoint.v1.AssetBalance', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.AssetEntry', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.Assets', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.Block', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.Checkpoint', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.CheckpointState', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.Collateral', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.Delegate', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.DelegateEntry', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.KeyRotations', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.NetParams', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.PartyAmount', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.PendingKeyRotation', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.PendingRewardPayout', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.Proposals', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.RewardPayout', null, global);
goog.exportSymbol('proto.vega.checkpoint.v1.Rewards', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.CheckpointState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.CheckpointState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.CheckpointState.displayName = 'proto.vega.checkpoint.v1.CheckpointState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.Checkpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.Checkpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.Checkpoint.displayName = 'proto.vega.checkpoint.v1.Checkpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.AssetEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.AssetEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.AssetEntry.displayName = 'proto.vega.checkpoint.v1.AssetEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.Assets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.Assets.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.Assets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.Assets.displayName = 'proto.vega.checkpoint.v1.Assets';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.AssetBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.AssetBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.AssetBalance.displayName = 'proto.vega.checkpoint.v1.AssetBalance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.Collateral = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.Collateral.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.Collateral, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.Collateral.displayName = 'proto.vega.checkpoint.v1.Collateral';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.NetParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.NetParams.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.NetParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.NetParams.displayName = 'proto.vega.checkpoint.v1.NetParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.Proposals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.Proposals.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.Proposals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.Proposals.displayName = 'proto.vega.checkpoint.v1.Proposals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.DelegateEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.DelegateEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.DelegateEntry.displayName = 'proto.vega.checkpoint.v1.DelegateEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.Delegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.Delegate.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.Delegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.Delegate.displayName = 'proto.vega.checkpoint.v1.Delegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.Block.displayName = 'proto.vega.checkpoint.v1.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.Rewards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.Rewards.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.Rewards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.Rewards.displayName = 'proto.vega.checkpoint.v1.Rewards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.RewardPayout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.RewardPayout.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.RewardPayout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.RewardPayout.displayName = 'proto.vega.checkpoint.v1.RewardPayout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.PendingRewardPayout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.PendingRewardPayout.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.PendingRewardPayout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.PendingRewardPayout.displayName = 'proto.vega.checkpoint.v1.PendingRewardPayout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.PartyAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.PartyAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.PartyAmount.displayName = 'proto.vega.checkpoint.v1.PartyAmount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.PendingKeyRotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.checkpoint.v1.PendingKeyRotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.PendingKeyRotation.displayName = 'proto.vega.checkpoint.v1.PendingKeyRotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.checkpoint.v1.KeyRotations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.checkpoint.v1.KeyRotations.repeatedFields_, null);
};
goog.inherits(proto.vega.checkpoint.v1.KeyRotations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.checkpoint.v1.KeyRotations.displayName = 'proto.vega.checkpoint.v1.KeyRotations';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.CheckpointState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.CheckpointState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.CheckpointState.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    state: msg.getState_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.CheckpointState}
 */
proto.vega.checkpoint.v1.CheckpointState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.CheckpointState;
  return proto.vega.checkpoint.v1.CheckpointState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.CheckpointState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.CheckpointState}
 */
proto.vega.checkpoint.v1.CheckpointState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.CheckpointState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.CheckpointState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.CheckpointState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getState_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.CheckpointState} returns this
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes state = 2;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.getState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes state = 2;
 * This is a type-conversion wrapper around `getState()`
 * @return {string}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.getState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getState()));
};


/**
 * optional bytes state = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getState()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.getState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getState()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.CheckpointState} returns this
 */
proto.vega.checkpoint.v1.CheckpointState.prototype.setState = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.Checkpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.Checkpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Checkpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    governance: msg.getGovernance_asB64(),
    assets: msg.getAssets_asB64(),
    collateral: msg.getCollateral_asB64(),
    networkParameters: msg.getNetworkParameters_asB64(),
    delegation: msg.getDelegation_asB64(),
    epoch: msg.getEpoch_asB64(),
    block: msg.getBlock_asB64(),
    rewards: msg.getRewards_asB64(),
    keyRotations: msg.getKeyRotations_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.Checkpoint}
 */
proto.vega.checkpoint.v1.Checkpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.Checkpoint;
  return proto.vega.checkpoint.v1.Checkpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.Checkpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.Checkpoint}
 */
proto.vega.checkpoint.v1.Checkpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGovernance(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssets(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCollateral(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNetworkParameters(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegation(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEpoch(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlock(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRewards(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyRotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.Checkpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.Checkpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Checkpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGovernance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAssets_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCollateral_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNetworkParameters_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDelegation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getEpoch_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBlock_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getRewards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getKeyRotations_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional bytes governance = 1;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getGovernance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes governance = 1;
 * This is a type-conversion wrapper around `getGovernance()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getGovernance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGovernance()));
};


/**
 * optional bytes governance = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGovernance()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getGovernance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGovernance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setGovernance = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes assets = 2;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getAssets = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes assets = 2;
 * This is a type-conversion wrapper around `getAssets()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getAssets_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssets()));
};


/**
 * optional bytes assets = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssets()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getAssets_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssets()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setAssets = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes collateral = 3;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getCollateral = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes collateral = 3;
 * This is a type-conversion wrapper around `getCollateral()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getCollateral_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCollateral()));
};


/**
 * optional bytes collateral = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCollateral()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getCollateral_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCollateral()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setCollateral = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes network_parameters = 4;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getNetworkParameters = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes network_parameters = 4;
 * This is a type-conversion wrapper around `getNetworkParameters()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getNetworkParameters_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNetworkParameters()));
};


/**
 * optional bytes network_parameters = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNetworkParameters()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getNetworkParameters_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNetworkParameters()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setNetworkParameters = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes delegation = 5;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getDelegation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes delegation = 5;
 * This is a type-conversion wrapper around `getDelegation()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getDelegation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegation()));
};


/**
 * optional bytes delegation = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegation()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getDelegation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setDelegation = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes epoch = 6;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getEpoch = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes epoch = 6;
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getEpoch_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEpoch()));
};


/**
 * optional bytes epoch = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getEpoch_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEpoch()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes block = 7;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getBlock = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes block = 7;
 * This is a type-conversion wrapper around `getBlock()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getBlock_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlock()));
};


/**
 * optional bytes block = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlock()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getBlock_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlock()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setBlock = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes rewards = 8;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getRewards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes rewards = 8;
 * This is a type-conversion wrapper around `getRewards()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getRewards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRewards()));
};


/**
 * optional bytes rewards = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRewards()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getRewards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRewards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setRewards = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes key_rotations = 9;
 * @return {!(string|Uint8Array)}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getKeyRotations = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes key_rotations = 9;
 * This is a type-conversion wrapper around `getKeyRotations()`
 * @return {string}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getKeyRotations_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyRotations()));
};


/**
 * optional bytes key_rotations = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyRotations()`
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.getKeyRotations_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyRotations()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vega.checkpoint.v1.Checkpoint} returns this
 */
proto.vega.checkpoint.v1.Checkpoint.prototype.setKeyRotations = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.AssetEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.AssetEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.AssetEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.AssetEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetDetails: (f = msg.getAssetDetails()) && vega_assets_pb.AssetDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.AssetEntry}
 */
proto.vega.checkpoint.v1.AssetEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.AssetEntry;
  return proto.vega.checkpoint.v1.AssetEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.AssetEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.AssetEntry}
 */
proto.vega.checkpoint.v1.AssetEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new vega_assets_pb.AssetDetails;
      reader.readMessage(value,vega_assets_pb.AssetDetails.deserializeBinaryFromReader);
      msg.setAssetDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.AssetEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.AssetEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.AssetEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.AssetEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vega_assets_pb.AssetDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.checkpoint.v1.AssetEntry.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.AssetEntry} returns this
 */
proto.vega.checkpoint.v1.AssetEntry.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional vega.AssetDetails asset_details = 2;
 * @return {?proto.vega.AssetDetails}
 */
proto.vega.checkpoint.v1.AssetEntry.prototype.getAssetDetails = function() {
  return /** @type{?proto.vega.AssetDetails} */ (
    jspb.Message.getWrapperField(this, vega_assets_pb.AssetDetails, 2));
};


/**
 * @param {?proto.vega.AssetDetails|undefined} value
 * @return {!proto.vega.checkpoint.v1.AssetEntry} returns this
*/
proto.vega.checkpoint.v1.AssetEntry.prototype.setAssetDetails = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vega.checkpoint.v1.AssetEntry} returns this
 */
proto.vega.checkpoint.v1.AssetEntry.prototype.clearAssetDetails = function() {
  return this.setAssetDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.checkpoint.v1.AssetEntry.prototype.hasAssetDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.Assets.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.Assets.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.Assets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.Assets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Assets.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.vega.checkpoint.v1.AssetEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.Assets}
 */
proto.vega.checkpoint.v1.Assets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.Assets;
  return proto.vega.checkpoint.v1.Assets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.Assets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.Assets}
 */
proto.vega.checkpoint.v1.Assets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.checkpoint.v1.AssetEntry;
      reader.readMessage(value,proto.vega.checkpoint.v1.AssetEntry.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Assets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.Assets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.Assets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Assets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.checkpoint.v1.AssetEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetEntry assets = 1;
 * @return {!Array<!proto.vega.checkpoint.v1.AssetEntry>}
 */
proto.vega.checkpoint.v1.Assets.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.AssetEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.AssetEntry, 1));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.AssetEntry>} value
 * @return {!proto.vega.checkpoint.v1.Assets} returns this
*/
proto.vega.checkpoint.v1.Assets.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.AssetEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.AssetEntry}
 */
proto.vega.checkpoint.v1.Assets.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.checkpoint.v1.AssetEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.Assets} returns this
 */
proto.vega.checkpoint.v1.Assets.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.AssetBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.AssetBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.AssetBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    party: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asset: jspb.Message.getFieldWithDefault(msg, 2, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.AssetBalance}
 */
proto.vega.checkpoint.v1.AssetBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.AssetBalance;
  return proto.vega.checkpoint.v1.AssetBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.AssetBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.AssetBalance}
 */
proto.vega.checkpoint.v1.AssetBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParty(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.AssetBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.AssetBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.AssetBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParty();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string party = 1;
 * @return {string}
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.getParty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.AssetBalance} returns this
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.setParty = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.AssetBalance} returns this
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string balance = 3;
 * @return {string}
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.AssetBalance} returns this
 */
proto.vega.checkpoint.v1.AssetBalance.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.Collateral.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.Collateral.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.Collateral.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.Collateral} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Collateral.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    proto.vega.checkpoint.v1.AssetBalance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.Collateral}
 */
proto.vega.checkpoint.v1.Collateral.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.Collateral;
  return proto.vega.checkpoint.v1.Collateral.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.Collateral} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.Collateral}
 */
proto.vega.checkpoint.v1.Collateral.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.checkpoint.v1.AssetBalance;
      reader.readMessage(value,proto.vega.checkpoint.v1.AssetBalance.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Collateral.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.Collateral.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.Collateral} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Collateral.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.checkpoint.v1.AssetBalance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetBalance balances = 1;
 * @return {!Array<!proto.vega.checkpoint.v1.AssetBalance>}
 */
proto.vega.checkpoint.v1.Collateral.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.AssetBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.AssetBalance, 1));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.AssetBalance>} value
 * @return {!proto.vega.checkpoint.v1.Collateral} returns this
*/
proto.vega.checkpoint.v1.Collateral.prototype.setBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.AssetBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.AssetBalance}
 */
proto.vega.checkpoint.v1.Collateral.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.checkpoint.v1.AssetBalance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.Collateral} returns this
 */
proto.vega.checkpoint.v1.Collateral.prototype.clearBalancesList = function() {
  return this.setBalancesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.NetParams.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.NetParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.NetParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.NetParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.NetParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    vega_vega_pb.NetworkParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.NetParams}
 */
proto.vega.checkpoint.v1.NetParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.NetParams;
  return proto.vega.checkpoint.v1.NetParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.NetParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.NetParams}
 */
proto.vega.checkpoint.v1.NetParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_vega_pb.NetworkParameter;
      reader.readMessage(value,vega_vega_pb.NetworkParameter.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.NetParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.NetParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.NetParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.NetParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vega_vega_pb.NetworkParameter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated vega.NetworkParameter params = 1;
 * @return {!Array<!proto.vega.NetworkParameter>}
 */
proto.vega.checkpoint.v1.NetParams.prototype.getParamsList = function() {
  return /** @type{!Array<!proto.vega.NetworkParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, vega_vega_pb.NetworkParameter, 1));
};


/**
 * @param {!Array<!proto.vega.NetworkParameter>} value
 * @return {!proto.vega.checkpoint.v1.NetParams} returns this
*/
proto.vega.checkpoint.v1.NetParams.prototype.setParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.NetworkParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.NetworkParameter}
 */
proto.vega.checkpoint.v1.NetParams.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.NetworkParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.NetParams} returns this
 */
proto.vega.checkpoint.v1.NetParams.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.Proposals.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.Proposals.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.Proposals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.Proposals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Proposals.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalsList: jspb.Message.toObjectList(msg.getProposalsList(),
    vega_governance_pb.Proposal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.Proposals}
 */
proto.vega.checkpoint.v1.Proposals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.Proposals;
  return proto.vega.checkpoint.v1.Proposals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.Proposals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.Proposals}
 */
proto.vega.checkpoint.v1.Proposals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vega_governance_pb.Proposal;
      reader.readMessage(value,vega_governance_pb.Proposal.deserializeBinaryFromReader);
      msg.addProposals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Proposals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.Proposals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.Proposals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Proposals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vega_governance_pb.Proposal.serializeBinaryToWriter
    );
  }
};


/**
 * repeated vega.Proposal proposals = 1;
 * @return {!Array<!proto.vega.Proposal>}
 */
proto.vega.checkpoint.v1.Proposals.prototype.getProposalsList = function() {
  return /** @type{!Array<!proto.vega.Proposal>} */ (
    jspb.Message.getRepeatedWrapperField(this, vega_governance_pb.Proposal, 1));
};


/**
 * @param {!Array<!proto.vega.Proposal>} value
 * @return {!proto.vega.checkpoint.v1.Proposals} returns this
*/
proto.vega.checkpoint.v1.Proposals.prototype.setProposalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.Proposal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.Proposal}
 */
proto.vega.checkpoint.v1.Proposals.prototype.addProposals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.Proposal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.Proposals} returns this
 */
proto.vega.checkpoint.v1.Proposals.prototype.clearProposalsList = function() {
  return this.setProposalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.DelegateEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.DelegateEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.DelegateEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    party: jspb.Message.getFieldWithDefault(msg, 1, ""),
    node: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    undelegate: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    epochSeq: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.DelegateEntry}
 */
proto.vega.checkpoint.v1.DelegateEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.DelegateEntry;
  return proto.vega.checkpoint.v1.DelegateEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.DelegateEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.DelegateEntry}
 */
proto.vega.checkpoint.v1.DelegateEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParty(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUndelegate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.DelegateEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.DelegateEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.DelegateEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParty();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUndelegate();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEpochSeq();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string party = 1;
 * @return {string}
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.getParty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.DelegateEntry} returns this
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.setParty = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string node = 2;
 * @return {string}
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.getNode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.DelegateEntry} returns this
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.setNode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.DelegateEntry} returns this
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool undelegate = 4;
 * @return {boolean}
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.getUndelegate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vega.checkpoint.v1.DelegateEntry} returns this
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.setUndelegate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 epoch_seq = 5;
 * @return {number}
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.getEpochSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.checkpoint.v1.DelegateEntry} returns this
 */
proto.vega.checkpoint.v1.DelegateEntry.prototype.setEpochSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.Delegate.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.Delegate.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.Delegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.Delegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Delegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeList: jspb.Message.toObjectList(msg.getActiveList(),
    proto.vega.checkpoint.v1.DelegateEntry.toObject, includeInstance),
    pendingList: jspb.Message.toObjectList(msg.getPendingList(),
    proto.vega.checkpoint.v1.DelegateEntry.toObject, includeInstance),
    autoDelegationList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.Delegate}
 */
proto.vega.checkpoint.v1.Delegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.Delegate;
  return proto.vega.checkpoint.v1.Delegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.Delegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.Delegate}
 */
proto.vega.checkpoint.v1.Delegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.checkpoint.v1.DelegateEntry;
      reader.readMessage(value,proto.vega.checkpoint.v1.DelegateEntry.deserializeBinaryFromReader);
      msg.addActive(value);
      break;
    case 2:
      var value = new proto.vega.checkpoint.v1.DelegateEntry;
      reader.readMessage(value,proto.vega.checkpoint.v1.DelegateEntry.deserializeBinaryFromReader);
      msg.addPending(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAutoDelegation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Delegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.Delegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.Delegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Delegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiveList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.checkpoint.v1.DelegateEntry.serializeBinaryToWriter
    );
  }
  f = message.getPendingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vega.checkpoint.v1.DelegateEntry.serializeBinaryToWriter
    );
  }
  f = message.getAutoDelegationList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated DelegateEntry active = 1;
 * @return {!Array<!proto.vega.checkpoint.v1.DelegateEntry>}
 */
proto.vega.checkpoint.v1.Delegate.prototype.getActiveList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.DelegateEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.DelegateEntry, 1));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.DelegateEntry>} value
 * @return {!proto.vega.checkpoint.v1.Delegate} returns this
*/
proto.vega.checkpoint.v1.Delegate.prototype.setActiveList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.DelegateEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.DelegateEntry}
 */
proto.vega.checkpoint.v1.Delegate.prototype.addActive = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.checkpoint.v1.DelegateEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.Delegate} returns this
 */
proto.vega.checkpoint.v1.Delegate.prototype.clearActiveList = function() {
  return this.setActiveList([]);
};


/**
 * repeated DelegateEntry pending = 2;
 * @return {!Array<!proto.vega.checkpoint.v1.DelegateEntry>}
 */
proto.vega.checkpoint.v1.Delegate.prototype.getPendingList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.DelegateEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.DelegateEntry, 2));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.DelegateEntry>} value
 * @return {!proto.vega.checkpoint.v1.Delegate} returns this
*/
proto.vega.checkpoint.v1.Delegate.prototype.setPendingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.DelegateEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.DelegateEntry}
 */
proto.vega.checkpoint.v1.Delegate.prototype.addPending = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vega.checkpoint.v1.DelegateEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.Delegate} returns this
 */
proto.vega.checkpoint.v1.Delegate.prototype.clearPendingList = function() {
  return this.setPendingList([]);
};


/**
 * repeated string auto_delegation = 3;
 * @return {!Array<string>}
 */
proto.vega.checkpoint.v1.Delegate.prototype.getAutoDelegationList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vega.checkpoint.v1.Delegate} returns this
 */
proto.vega.checkpoint.v1.Delegate.prototype.setAutoDelegationList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.Delegate} returns this
 */
proto.vega.checkpoint.v1.Delegate.prototype.addAutoDelegation = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.Delegate} returns this
 */
proto.vega.checkpoint.v1.Delegate.prototype.clearAutoDelegationList = function() {
  return this.setAutoDelegationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.Block}
 */
proto.vega.checkpoint.v1.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.Block;
  return proto.vega.checkpoint.v1.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.Block}
 */
proto.vega.checkpoint.v1.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.vega.checkpoint.v1.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.checkpoint.v1.Block} returns this
 */
proto.vega.checkpoint.v1.Block.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.Rewards.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.Rewards.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.Rewards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.Rewards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Rewards.toObject = function(includeInstance, msg) {
  var f, obj = {
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.vega.checkpoint.v1.RewardPayout.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.Rewards}
 */
proto.vega.checkpoint.v1.Rewards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.Rewards;
  return proto.vega.checkpoint.v1.Rewards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.Rewards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.Rewards}
 */
proto.vega.checkpoint.v1.Rewards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.checkpoint.v1.RewardPayout;
      reader.readMessage(value,proto.vega.checkpoint.v1.RewardPayout.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.Rewards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.Rewards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.Rewards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.Rewards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.checkpoint.v1.RewardPayout.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RewardPayout rewards = 1;
 * @return {!Array<!proto.vega.checkpoint.v1.RewardPayout>}
 */
proto.vega.checkpoint.v1.Rewards.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.RewardPayout>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.RewardPayout, 1));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.RewardPayout>} value
 * @return {!proto.vega.checkpoint.v1.Rewards} returns this
*/
proto.vega.checkpoint.v1.Rewards.prototype.setRewardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.RewardPayout=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.RewardPayout}
 */
proto.vega.checkpoint.v1.Rewards.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.checkpoint.v1.RewardPayout, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.Rewards} returns this
 */
proto.vega.checkpoint.v1.Rewards.prototype.clearRewardsList = function() {
  return this.setRewardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.RewardPayout.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.RewardPayout.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.RewardPayout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.RewardPayout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.RewardPayout.toObject = function(includeInstance, msg) {
  var f, obj = {
    payoutTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rewardsPayoutList: jspb.Message.toObjectList(msg.getRewardsPayoutList(),
    proto.vega.checkpoint.v1.PendingRewardPayout.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.RewardPayout}
 */
proto.vega.checkpoint.v1.RewardPayout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.RewardPayout;
  return proto.vega.checkpoint.v1.RewardPayout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.RewardPayout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.RewardPayout}
 */
proto.vega.checkpoint.v1.RewardPayout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPayoutTime(value);
      break;
    case 2:
      var value = new proto.vega.checkpoint.v1.PendingRewardPayout;
      reader.readMessage(value,proto.vega.checkpoint.v1.PendingRewardPayout.deserializeBinaryFromReader);
      msg.addRewardsPayout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.RewardPayout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.RewardPayout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.RewardPayout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.RewardPayout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayoutTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRewardsPayoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vega.checkpoint.v1.PendingRewardPayout.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 payout_time = 1;
 * @return {number}
 */
proto.vega.checkpoint.v1.RewardPayout.prototype.getPayoutTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.checkpoint.v1.RewardPayout} returns this
 */
proto.vega.checkpoint.v1.RewardPayout.prototype.setPayoutTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PendingRewardPayout rewards_payout = 2;
 * @return {!Array<!proto.vega.checkpoint.v1.PendingRewardPayout>}
 */
proto.vega.checkpoint.v1.RewardPayout.prototype.getRewardsPayoutList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.PendingRewardPayout>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.PendingRewardPayout, 2));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.PendingRewardPayout>} value
 * @return {!proto.vega.checkpoint.v1.RewardPayout} returns this
*/
proto.vega.checkpoint.v1.RewardPayout.prototype.setRewardsPayoutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.PendingRewardPayout=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout}
 */
proto.vega.checkpoint.v1.RewardPayout.prototype.addRewardsPayout = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vega.checkpoint.v1.PendingRewardPayout, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.RewardPayout} returns this
 */
proto.vega.checkpoint.v1.RewardPayout.prototype.clearRewardsPayoutList = function() {
  return this.setRewardsPayoutList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.PendingRewardPayout.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.PendingRewardPayout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.PendingRewardPayout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.PendingRewardPayout.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAccount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asset: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partyAmountList: jspb.Message.toObjectList(msg.getPartyAmountList(),
    proto.vega.checkpoint.v1.PartyAmount.toObject, includeInstance),
    totalReward: jspb.Message.getFieldWithDefault(msg, 4, ""),
    epochSeq: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.PendingRewardPayout;
  return proto.vega.checkpoint.v1.PendingRewardPayout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.PendingRewardPayout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = new proto.vega.checkpoint.v1.PartyAmount;
      reader.readMessage(value,proto.vega.checkpoint.v1.PartyAmount.deserializeBinaryFromReader);
      msg.addPartyAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalReward(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpochSeq(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.PendingRewardPayout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.PendingRewardPayout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.PendingRewardPayout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartyAmountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vega.checkpoint.v1.PartyAmount.serializeBinaryToWriter
    );
  }
  f = message.getTotalReward();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEpochSeq();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional string from_account = 1;
 * @return {string}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.getFromAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout} returns this
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.setFromAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout} returns this
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PartyAmount party_amount = 3;
 * @return {!Array<!proto.vega.checkpoint.v1.PartyAmount>}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.getPartyAmountList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.PartyAmount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.PartyAmount, 3));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.PartyAmount>} value
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout} returns this
*/
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.setPartyAmountList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.PartyAmount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.PartyAmount}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.addPartyAmount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vega.checkpoint.v1.PartyAmount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout} returns this
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.clearPartyAmountList = function() {
  return this.setPartyAmountList([]);
};


/**
 * optional string total_reward = 4;
 * @return {string}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.getTotalReward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout} returns this
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.setTotalReward = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string epoch_seq = 5;
 * @return {string}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.getEpochSeq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout} returns this
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.setEpochSeq = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 timestamp = 6;
 * @return {number}
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.checkpoint.v1.PendingRewardPayout} returns this
 */
proto.vega.checkpoint.v1.PendingRewardPayout.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.PartyAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.PartyAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.PartyAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.PartyAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    party: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.PartyAmount}
 */
proto.vega.checkpoint.v1.PartyAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.PartyAmount;
  return proto.vega.checkpoint.v1.PartyAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.PartyAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.PartyAmount}
 */
proto.vega.checkpoint.v1.PartyAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParty(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.PartyAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.PartyAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.PartyAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.PartyAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParty();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string party = 1;
 * @return {string}
 */
proto.vega.checkpoint.v1.PartyAmount.prototype.getParty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PartyAmount} returns this
 */
proto.vega.checkpoint.v1.PartyAmount.prototype.setParty = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.vega.checkpoint.v1.PartyAmount.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PartyAmount} returns this
 */
proto.vega.checkpoint.v1.PartyAmount.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.PendingKeyRotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.PendingKeyRotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.PendingKeyRotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    relativeTargetBlockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newPubKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    newPubKeyIndex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.PendingKeyRotation}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.PendingKeyRotation;
  return proto.vega.checkpoint.v1.PendingKeyRotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.PendingKeyRotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.PendingKeyRotation}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRelativeTargetBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPubKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewPubKeyIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.PendingKeyRotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.PendingKeyRotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.PendingKeyRotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelativeTargetBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewPubKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNewPubKeyIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint64 relative_target_block_height = 1;
 * @return {number}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.getRelativeTargetBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.checkpoint.v1.PendingKeyRotation} returns this
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.setRelativeTargetBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string node_id = 2;
 * @return {string}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PendingKeyRotation} returns this
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_pub_key = 3;
 * @return {string}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.getNewPubKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vega.checkpoint.v1.PendingKeyRotation} returns this
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.setNewPubKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 new_pub_key_index = 4;
 * @return {number}
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.getNewPubKeyIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vega.checkpoint.v1.PendingKeyRotation} returns this
 */
proto.vega.checkpoint.v1.PendingKeyRotation.prototype.setNewPubKeyIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.checkpoint.v1.KeyRotations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.checkpoint.v1.KeyRotations.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.checkpoint.v1.KeyRotations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.checkpoint.v1.KeyRotations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.KeyRotations.toObject = function(includeInstance, msg) {
  var f, obj = {
    pendingKeyRotationsList: jspb.Message.toObjectList(msg.getPendingKeyRotationsList(),
    proto.vega.checkpoint.v1.PendingKeyRotation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.checkpoint.v1.KeyRotations}
 */
proto.vega.checkpoint.v1.KeyRotations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.checkpoint.v1.KeyRotations;
  return proto.vega.checkpoint.v1.KeyRotations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.checkpoint.v1.KeyRotations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.checkpoint.v1.KeyRotations}
 */
proto.vega.checkpoint.v1.KeyRotations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.checkpoint.v1.PendingKeyRotation;
      reader.readMessage(value,proto.vega.checkpoint.v1.PendingKeyRotation.deserializeBinaryFromReader);
      msg.addPendingKeyRotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.checkpoint.v1.KeyRotations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.checkpoint.v1.KeyRotations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.checkpoint.v1.KeyRotations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.checkpoint.v1.KeyRotations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPendingKeyRotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.checkpoint.v1.PendingKeyRotation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PendingKeyRotation pending_key_rotations = 1;
 * @return {!Array<!proto.vega.checkpoint.v1.PendingKeyRotation>}
 */
proto.vega.checkpoint.v1.KeyRotations.prototype.getPendingKeyRotationsList = function() {
  return /** @type{!Array<!proto.vega.checkpoint.v1.PendingKeyRotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.checkpoint.v1.PendingKeyRotation, 1));
};


/**
 * @param {!Array<!proto.vega.checkpoint.v1.PendingKeyRotation>} value
 * @return {!proto.vega.checkpoint.v1.KeyRotations} returns this
*/
proto.vega.checkpoint.v1.KeyRotations.prototype.setPendingKeyRotationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.checkpoint.v1.PendingKeyRotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.checkpoint.v1.PendingKeyRotation}
 */
proto.vega.checkpoint.v1.KeyRotations.prototype.addPendingKeyRotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.checkpoint.v1.PendingKeyRotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vega.checkpoint.v1.KeyRotations} returns this
 */
proto.vega.checkpoint.v1.KeyRotations.prototype.clearPendingKeyRotationsList = function() {
  return this.setPendingKeyRotationsList([]);
};


goog.object.extend(exports, proto.vega.checkpoint.v1);
